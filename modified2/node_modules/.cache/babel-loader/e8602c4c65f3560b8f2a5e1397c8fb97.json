{"remainingRequest":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/node_modules/babel-loader/lib/index.js!/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/node_modules/eslint-loader/index.js??ref--14-0!/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/src/api/index.js","dependencies":[{"path":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/src/api/index.js","mtime":1652416123081},{"path":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/babel.config.js","mtime":1652416120110},{"path":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/node_modules/cache-loader/dist/cjs.js","mtime":1652416120677},{"path":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/node_modules/babel-loader/lib/index.js","mtime":1652416120576},{"path":"/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/node_modules/eslint-loader/index.js","mtime":1652416121374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/chenchengyu/Documents/Columbia/Course/BlockChain/ELENE6883_Final-Project/modified2/src/api/index.js"],"names":["contract","Big","getName","Instance","methods","name","call","getSymbol","symbol","getSold","Instance2","tokensSold","getBalance","acc","balanceOf","getPot","addr","Instance3","from","getPlayers","getlotteryId","lotteryId","lotteryHistory","i","enter","sendBlock","password","amount","times","toString","gas_price","gas","pickwinner","pickWinner","gettest","transfer","res2","console","log","res22","res8","then","data","buy_token","limit","buyTokens","response","success"],"mappings":"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","sourcesContent":["import contract from '../contract';\n\n//import store from '../store'\n\nimport Big from 'bignumber.js'\n\nexport default {\n    async getName() {\n        return await contract.Instance.methods.name().call();\n    },\n    async getSymbol() {\n        return await contract.Instance.methods.symbol().call();\n    },\n    async getSold() {\n        return await contract.Instance2.methods.tokensSold().call();\n    },\n    async getBalance(acc) {\n        return await contract.Instance.methods.balanceOf(acc).call();\n    },\n    async getPot(addr) {\n        return await contract.Instance3.methods.getBalance().call({from: addr});\n    },\n    async getPlayers(addr) {\n        return await contract.Instance3.methods.getPlayers().call({from: addr});\n    },\n    async getlotteryId(addr) {\n        return await contract.Instance3.methods.lotteryId().call({from: addr});\n    },\n    async lotteryHistory(i,addr) {\n        return await contract.Instance3.methods.lotteryHistory(i).call({from: addr});\n    },\n    async enter(addr) {\n        return await contract.Instance3.methods.enter()\n        .sendBlock({\n            from: addr,\n            password: 'markmark',\n            amount: new Big('3').times('1e18').toString(),\n            gas_price: '1000000000',\n            gas:'2000000',\n        });\n    },\n    async pickwinner(addr) {\n        return await contract.Instance3.methods.pickWinner().call({from: addr});\n    },\n    async gettest(addr) {\n\n\n        //console.log(\"res1   \"+res1)\n        let res2=await contract.Instance.methods.transfer(\"0xE2D7E5628Edd78553766Fc4848fa73428df34532\",new Big('4').times('1e8').toString())\n        .sendBlock({\n            from: addr,\n            password: 'markmark',\n            amount: \"0\",\n            gas_price: '1000000000',\n            gas:'2000000',\n        });//这个函数是将测试转钱功能---测试失败！\n        console.log(\"res2   \"+res2)\n\n        console.log(\"now michael\")\n        console.log(new Big('4').times('1e18').toString())\n        console.log(new Big('3').times('1e18').toString())\n        let res22=await contract.Instance3.methods.enter()\n        .sendBlock({\n            from: addr,\n            password: 'markmark',\n            amount: new Big('0.15').times('1e18').toString(),\n            gas_price: '1000000000',\n            gas:'2000000',\n        });//这个函数是将账户加入抽奖池---测试正确！\n        console.log(\"res22  \"+res22)\n\n\n        var res8=await contract.Instance.methods.balanceOf(addr).call({from: addr});\n        console.log(\"balanceof test   \"+res8)\n\n        contract.Instance3.methods.getBalance().call({from: addr}).then(data => {console.log('testCall1 data', data)})\n        return res2\n\n\n    },\n\n    async buy_token(limit,addr) {\n        console.log(\"now buying\")\n\n        //const CCNAmount = new Big(limit).times('1e8').toString();\n\n        const response = await contract.Instance2.methods.buyTokens(new Big('4').times('1e8').toString())\n        .sendBlock({\n            from: addr,\n            password: 'markmark',\n            amount: \"0\",\n            gas_price: '1000000000',\n            gas:'2000000',\n        });\n        if (response.success) {\n            console.log('transaction success: ', response);\n        } else {\n            console.log('transaction failed: ', response);\n        }\n\n        return response;\n    }\n}"]}]}